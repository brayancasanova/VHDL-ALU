// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/31/2024 14:16:15"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    test_ALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module test_ALU_vlg_sample_tst(
	A,
	ALU_Sel,
	B,
	sampler_tx
);
input [7:0] A;
input [1:0] ALU_Sel;
input [7:0] B;
output sampler_tx;

reg sample;
time current_time;
always @(A or ALU_Sel or B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module test_ALU_vlg_check_tst (
	dec,
	uni,
	vec_NZVC,
	sampler_rx
);
input [6:0] dec;
input [6:0] uni;
input [3:0] vec_NZVC;
input sampler_rx;

reg [6:0] dec_expected;
reg [6:0] uni_expected;
reg [3:0] vec_NZVC_expected;

reg [6:0] dec_prev;
reg [6:0] uni_prev;
reg [3:0] vec_NZVC_prev;

reg [6:0] dec_expected_prev;
reg [6:0] uni_expected_prev;
reg [3:0] vec_NZVC_expected_prev;

reg [6:0] last_dec_exp;
reg [6:0] last_uni_exp;
reg [3:0] last_vec_NZVC_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	dec_prev = dec;
	uni_prev = uni;
	vec_NZVC_prev = vec_NZVC;
end

// update expected /o prevs

always @(trigger)
begin
	dec_expected_prev = dec_expected;
	uni_expected_prev = uni_expected;
	vec_NZVC_expected_prev = vec_NZVC_expected;
end


// expected dec[ 6 ]
initial
begin
	dec_expected[6] = 1'bX;
end 
// expected dec[ 5 ]
initial
begin
	dec_expected[5] = 1'bX;
end 
// expected dec[ 4 ]
initial
begin
	dec_expected[4] = 1'bX;
end 
// expected dec[ 3 ]
initial
begin
	dec_expected[3] = 1'bX;
end 
// expected dec[ 2 ]
initial
begin
	dec_expected[2] = 1'bX;
end 
// expected dec[ 1 ]
initial
begin
	dec_expected[1] = 1'bX;
end 
// expected dec[ 0 ]
initial
begin
	dec_expected[0] = 1'bX;
end 
// expected uni[ 6 ]
initial
begin
	uni_expected[6] = 1'bX;
end 
// expected uni[ 5 ]
initial
begin
	uni_expected[5] = 1'bX;
end 
// expected uni[ 4 ]
initial
begin
	uni_expected[4] = 1'bX;
end 
// expected uni[ 3 ]
initial
begin
	uni_expected[3] = 1'bX;
end 
// expected uni[ 2 ]
initial
begin
	uni_expected[2] = 1'bX;
end 
// expected uni[ 1 ]
initial
begin
	uni_expected[1] = 1'bX;
end 
// expected uni[ 0 ]
initial
begin
	uni_expected[0] = 1'bX;
end 
// expected vec_NZVC[ 3 ]
initial
begin
	vec_NZVC_expected[3] = 1'bX;
end 
// expected vec_NZVC[ 2 ]
initial
begin
	vec_NZVC_expected[2] = 1'bX;
end 
// expected vec_NZVC[ 1 ]
initial
begin
	vec_NZVC_expected[1] = 1'bX;
end 
// expected vec_NZVC[ 0 ]
initial
begin
	vec_NZVC_expected[0] = 1'bX;
end 
// generate trigger
always @(dec_expected or dec or uni_expected or uni or vec_NZVC_expected or vec_NZVC)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dec = %b | expected uni = %b | expected vec_NZVC = %b | ",dec_expected_prev,uni_expected_prev,vec_NZVC_expected_prev);
	$display("| real dec = %b | real uni = %b | real vec_NZVC = %b | ",dec_prev,uni_prev,vec_NZVC_prev);
`endif
	if (
		( dec_expected_prev[0] !== 1'bx ) && ( dec_prev[0] !== dec_expected_prev[0] )
		&& ((dec_expected_prev[0] !== last_dec_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[0] = dec_expected_prev[0];
	end
	if (
		( dec_expected_prev[1] !== 1'bx ) && ( dec_prev[1] !== dec_expected_prev[1] )
		&& ((dec_expected_prev[1] !== last_dec_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[1] = dec_expected_prev[1];
	end
	if (
		( dec_expected_prev[2] !== 1'bx ) && ( dec_prev[2] !== dec_expected_prev[2] )
		&& ((dec_expected_prev[2] !== last_dec_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[2] = dec_expected_prev[2];
	end
	if (
		( dec_expected_prev[3] !== 1'bx ) && ( dec_prev[3] !== dec_expected_prev[3] )
		&& ((dec_expected_prev[3] !== last_dec_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[3] = dec_expected_prev[3];
	end
	if (
		( dec_expected_prev[4] !== 1'bx ) && ( dec_prev[4] !== dec_expected_prev[4] )
		&& ((dec_expected_prev[4] !== last_dec_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[4] = dec_expected_prev[4];
	end
	if (
		( dec_expected_prev[5] !== 1'bx ) && ( dec_prev[5] !== dec_expected_prev[5] )
		&& ((dec_expected_prev[5] !== last_dec_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[5] = dec_expected_prev[5];
	end
	if (
		( dec_expected_prev[6] !== 1'bx ) && ( dec_prev[6] !== dec_expected_prev[6] )
		&& ((dec_expected_prev[6] !== last_dec_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dec[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dec_expected_prev);
		$display ("     Real value = %b", dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dec_exp[6] = dec_expected_prev[6];
	end
	if (
		( uni_expected_prev[0] !== 1'bx ) && ( uni_prev[0] !== uni_expected_prev[0] )
		&& ((uni_expected_prev[0] !== last_uni_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uni[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uni_expected_prev);
		$display ("     Real value = %b", uni_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_uni_exp[0] = uni_expected_prev[0];
	end
	if (
		( uni_expected_prev[1] !== 1'bx ) && ( uni_prev[1] !== uni_expected_prev[1] )
		&& ((uni_expected_prev[1] !== last_uni_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uni[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uni_expected_prev);
		$display ("     Real value = %b", uni_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_uni_exp[1] = uni_expected_prev[1];
	end
	if (
		( uni_expected_prev[2] !== 1'bx ) && ( uni_prev[2] !== uni_expected_prev[2] )
		&& ((uni_expected_prev[2] !== last_uni_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uni[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uni_expected_prev);
		$display ("     Real value = %b", uni_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_uni_exp[2] = uni_expected_prev[2];
	end
	if (
		( uni_expected_prev[3] !== 1'bx ) && ( uni_prev[3] !== uni_expected_prev[3] )
		&& ((uni_expected_prev[3] !== last_uni_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uni[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uni_expected_prev);
		$display ("     Real value = %b", uni_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_uni_exp[3] = uni_expected_prev[3];
	end
	if (
		( uni_expected_prev[4] !== 1'bx ) && ( uni_prev[4] !== uni_expected_prev[4] )
		&& ((uni_expected_prev[4] !== last_uni_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uni[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uni_expected_prev);
		$display ("     Real value = %b", uni_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_uni_exp[4] = uni_expected_prev[4];
	end
	if (
		( uni_expected_prev[5] !== 1'bx ) && ( uni_prev[5] !== uni_expected_prev[5] )
		&& ((uni_expected_prev[5] !== last_uni_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uni[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uni_expected_prev);
		$display ("     Real value = %b", uni_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_uni_exp[5] = uni_expected_prev[5];
	end
	if (
		( uni_expected_prev[6] !== 1'bx ) && ( uni_prev[6] !== uni_expected_prev[6] )
		&& ((uni_expected_prev[6] !== last_uni_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uni[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uni_expected_prev);
		$display ("     Real value = %b", uni_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_uni_exp[6] = uni_expected_prev[6];
	end
	if (
		( vec_NZVC_expected_prev[0] !== 1'bx ) && ( vec_NZVC_prev[0] !== vec_NZVC_expected_prev[0] )
		&& ((vec_NZVC_expected_prev[0] !== last_vec_NZVC_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vec_NZVC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vec_NZVC_expected_prev);
		$display ("     Real value = %b", vec_NZVC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_vec_NZVC_exp[0] = vec_NZVC_expected_prev[0];
	end
	if (
		( vec_NZVC_expected_prev[1] !== 1'bx ) && ( vec_NZVC_prev[1] !== vec_NZVC_expected_prev[1] )
		&& ((vec_NZVC_expected_prev[1] !== last_vec_NZVC_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vec_NZVC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vec_NZVC_expected_prev);
		$display ("     Real value = %b", vec_NZVC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_vec_NZVC_exp[1] = vec_NZVC_expected_prev[1];
	end
	if (
		( vec_NZVC_expected_prev[2] !== 1'bx ) && ( vec_NZVC_prev[2] !== vec_NZVC_expected_prev[2] )
		&& ((vec_NZVC_expected_prev[2] !== last_vec_NZVC_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vec_NZVC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vec_NZVC_expected_prev);
		$display ("     Real value = %b", vec_NZVC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_vec_NZVC_exp[2] = vec_NZVC_expected_prev[2];
	end
	if (
		( vec_NZVC_expected_prev[3] !== 1'bx ) && ( vec_NZVC_prev[3] !== vec_NZVC_expected_prev[3] )
		&& ((vec_NZVC_expected_prev[3] !== last_vec_NZVC_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vec_NZVC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vec_NZVC_expected_prev);
		$display ("     Real value = %b", vec_NZVC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_vec_NZVC_exp[3] = vec_NZVC_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module test_ALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [1:0] ALU_Sel;
reg [7:0] B;
// wires                                               
wire [6:0] dec;
wire [6:0] uni;
wire [3:0] vec_NZVC;

wire sampler;                             

// assign statements (if any)                          
test_ALU i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.ALU_Sel(ALU_Sel),
	.B(B),
	.dec(dec),
	.uni(uni),
	.vec_NZVC(vec_NZVC)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b1;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b1;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b1;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 
// ALU_Sel[ 1 ]
initial
begin
	ALU_Sel[1] = 1'b0;
end 
// ALU_Sel[ 0 ]
initial
begin
	ALU_Sel[0] = 1'b0;
end 

test_ALU_vlg_sample_tst tb_sample (
	.A(A),
	.ALU_Sel(ALU_Sel),
	.B(B),
	.sampler_tx(sampler)
);

test_ALU_vlg_check_tst tb_out(
	.dec(dec),
	.uni(uni),
	.vec_NZVC(vec_NZVC),
	.sampler_rx(sampler)
);
endmodule

